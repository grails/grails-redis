plugins {
    id "java-library"
    id "eclipse"
    id "idea"
    id "org.grails.grails-plugin"
    id 'signing'
    id 'maven-publish'
}

version = project.projectVersion
group = "org.grails.plugins"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

def isGrailsPlugin = project.group == 'org.grails.plugins'
def pomInfo = {
    delegate.name project.title
    delegate.description project.projectDesc
    delegate.url 'https://github.com/grails/grails-redis'

    delegate.licenses {
        delegate.license {
            delegate.name 'Apache-2.0'
            delegate.url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
            delegate.distribution 'repo'
        }
    }

    delegate.scm {
        delegate.url "scm:git@github.com:${githubSlug}.git"
        delegate.connection "https://github.com${githubSlug}"
        delegate.developerConnection "scm:git:ssh://github.com:${githubSlug}.git"
    }

    if (developers) {
        delegate.developers {
            for (dev in developers.split(',')) {
                delegate.developer {
                    delegate.id dev.toLowerCase().replace(' ', '')
                    delegate.name dev.strip()
                }
            }
        }
    }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

configurations {
    documentation.extendsFrom compileClasspath
    all {
        resolutionStrategy {
            force "org.apache.commons:commons-pool2:$commonsPool2Version"
        }
    }
}

repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-dependencies"

    testImplementation 'org.grails:grails-web-testing-support'

    implementation "org.grails:grails-console"

    api "redis.clients:jedis:$jredisVersion"
    api "com.google.code.gson:gson:$gsonVersion"

    documentation("com.github.javaparser:javaparser-core:$javaParserCoreVersion") {
        transitive = false
    }
}

groovydoc {
    groovyClasspath += configurations.documentation
}

test {
    useJUnitPlatform()
}

jar {
  exclude "application.groovy"
  exclude "src/test/projects/**"
}

publishing {

    if (isSnapshot) {
        repositories {
            maven {
                credentials {
                    def u = System.getenv("ARTIFACTORY_USERNAME") ?: project.findProperty("artifactoryPublishUsername") ?: ''
                    def p = System.getenv("ARTIFACTORY_PASSWORD") ?: project.findProperty("artifactoryPublishPassword") ?: ''
                    username = u
                    password = p
                }
                url = isGrailsPlugin ?
                      uri('https://repo.grails.org/grails/plugins3-snapshots-local') :
                      uri('https://repo.grails.org/grails/libs-snapshots-local')
            }
        }
    }

    publications {
        maven(MavenPublication) {

            groupId = project.group
            version = project.version

            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom.withXml {

                def pomNode = asNode()
                pomNode.children().last() + pomInfo

                // dependency management shouldn't be included
                try { pomNode.dependencyManagement.replaceNode({}) } catch (Throwable ignore) {}
            }
        }
    }
}

if (isReleaseVersion) {
    afterEvaluate {
        signing {
            required = { isReleaseVersion && gradle.taskGraph.hasTask('publish') }
            sign(publishing.publications.maven)
        }
    }
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}
